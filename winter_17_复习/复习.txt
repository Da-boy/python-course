1、python一切皆对象

2、对象：
		对象本身内部也储存了一些只属于对象的属性
		类创造对象的过程就是实例化过程
	创建一个类
		class 类名
		type是所有类的元类，object是所有类的父类
		例：class A(metaclass = type) 默认是type
			class B(metaclass = ABCMeta)  ABCMeta创建了这个B类，那么ABCMeta就是B的元类
	
3、组合：一个类的对象作为另一个类对象的属性

4、多继承：
		mro方法查看继承顺序
		
5、抽象类和接口类：
	规范子类中必须实现某种方法
	不能被实例化
	有原生的实现抽象类的方法，但没有原生实现接口类的方法
	python本无接口类
	
6、多态：一种类型的多种形态，多个子类去继承父类，那么每一个子类都是这个父类的一种形态

7、封装：
		广义上的封装：把方法和属性封装在一个类中，定义一个规范来描述一类事物
		狭义上的封装：私有化，只能在类的内部访问
		
		__静态变量：私有方法，私有对象属性，私有静态方法，私有类方法
		子类不能访问父类的私有变量
	
8、property 装饰器函数，将类方法伪装成属性
class Circle:
    def __init__(self,r):
        self.r = r

    @property
    def area(self): # 这个方法本身是一个属性，这个属性会随着对象的一些基础数值的变化而变化
        return 3.14*self.r**2

a1 = Circle(5)
print(a1.area)

a2 = Circle(10)
print(a2.area)

@方法名.setter 装饰器，修改被property装饰的属性会调用这个方法
@方法名.deleter 装饰器，删除被property装饰的属性会调用这个方法

9、classmethod 类方法的装饰器
	使用类名调用，默认传类名作为第一参数
	使用场景：不用对象命名空间的内容，而用到了类命名空间的变量（静态属性），或者类方法或静态方法

10、staticmethod 静态方法的装饰器 
	相当于一个普通函数
	如果一个类里面的方法，既不需要用到self的资源，也不用cls中的资源
	但是由于某种原因，还要把这个方法放在类中，这个时候，就将这个方法变成一个静态方法
		某种原因：
			1、想完全面向对象编程，所有的函数都必须写到类里
			2、某种功能确实是这个类的方法，但确实没有用到类中的资源（例如选课登录功能）
class Person:
	@staticmethod
	def login():
		pass
class Student(Person):pass
class Teacher(Person):pass
class Manager(Person):pass
class Course:pass
class Classes:pass
注：在实践的过程中，发现功能确实是这个类的方法，但确实没有用到类中的资源，可以考虑staticmethod

11、列表操作
	可使用：append，pop # 在末尾插入可以
	不可使用：insert,pop(n)

12、反射：从某个指定的命名空间中，用字符串数据类型的变量名来获取变量的值
类名反射 ： 静态属性，类方法，静态方法
对象反射 ： 对象属性，方法
模块     ： 模块中的方法
自己的模块中
getattr(mymodule,'变量名')

四种方法：
	hasattr
	getattr
	setattr
	delattr

获取的变量名，只能拿到一个字符串的版本

13、内置方法/双下方法/魔术方法
	__名字__不能被直接调用
	__call__ ：对象（） 用类写装饰器
	__str__  : str(obj),要求obj必须实现了__str__,要求这个方法的返回值必须是数字str类型.与print/%s/str 相关
	__len__  : len(obj),要求obj必须实现了__len__,要求这个方法的返回值必须是数字int类型
	__new__  : 在实例化过程中，最先执行的方法，在执行init之前，用来创造一个对象，构造方法
			单例类
	__init__ : 在实例化过程中,在new执行之后，自动触发的一个初始化方法

14、__repr__



